"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable camelcase */
var react_1 = __importDefault(require("react"));
var fullscreen_1 = __importDefault(require("part:@sanity/components/dialogs/fullscreen"));
var spinner_1 = __importDefault(require("part:@sanity/components/loading/spinner"));
var config_asset_source_cloudinary_1 = __importDefault(require("config:asset-source-cloudinary"));
var utils_1 = require("../utils");
var CloudinaryAssetSource_css_1 = __importDefault(require("./CloudinaryAssetSource.css"));
window.cloudinary = window.cloudinary || {};
var CloudinaryAssetSource = /** @class */ (function (_super) {
    __extends(CloudinaryAssetSource, _super);
    function CloudinaryAssetSource() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            loadingMessage: 'Loading Cloudinary Media Libary',
            hasConfig: false
        };
        _this.contentRef = react_1.default.createRef();
        _this.library = null;
        _this.domId = Date.now();
        _this.setupMediaLibrary = function () {
            var _a = _this.props, selectedAssets = _a.selectedAssets, selectionType = _a.selectionType;
            var firstSelectedAsset = selectedAssets ? selectedAssets[0] : null;
            _this.library = window.cloudinary.createMediaLibrary({
                cloud_name: config_asset_source_cloudinary_1.default.cloudName,
                api_key: config_asset_source_cloudinary_1.default.apiKey,
                inline_container: "#cloundinaryWidget-" + _this.domId,
                remove_header: true,
                insert_caption: 'Select'
            }, {
                insertHandler: _this.handleSelect
            });
            var iframe = _this.contentRef.current && _this.contentRef.current.firstChild;
            if (iframe && iframe instanceof HTMLIFrameElement) {
                iframe.onload = function () {
                    _this.setState({ loadingMessage: null });
                    var asset;
                    if (selectionType === 'single' &&
                        firstSelectedAsset &&
                        firstSelectedAsset.source &&
                        firstSelectedAsset.source.id) {
                        asset = utils_1.decodeSourceId(firstSelectedAsset.source.id);
                    }
                    var folder = asset
                        ? {
                            path: asset.public_id
                                .split('/')
                                .slice(0, -1)
                                .join('/'),
                            resource_type: 'image'
                        }
                        : { path: '', resource_type: 'image' };
                    if (_this.library && _this.contentRef.current) {
                        _this.library.show({ folder: folder, asset: asset });
                        _this.contentRef.current.style.visibility = 'visible';
                    }
                };
            }
        };
        _this.handleSelect = function (_a) {
            var assets = _a.assets;
            if (!_this.library) {
                return;
            }
            var imageAssets = assets.filter(function (asset) { return asset.resource_type === 'image'; });
            if (imageAssets.length === 0) {
                throw new Error('The selection did not contain any images.');
            }
            _this.library.hide();
            _this.props.onSelect(imageAssets.map(function (asset) {
                var url = asset.derived && asset.derived[0] ? asset.derived[0].secure_url : asset.secure_url;
                return {
                    kind: 'url',
                    value: url,
                    assetDocumentProps: {
                        originalFilename: utils_1.encodeFilename(asset),
                        source: {
                            id: utils_1.encodeSourceId(asset),
                            name: "cloudinary:" + config_asset_source_cloudinary_1.default.cloudName
                        }
                    }
                };
            }));
        };
        _this.handleClose = function () {
            if (_this.library) {
                _this.library.hide();
            }
            _this.props.onClose();
        };
        return _this;
    }
    CloudinaryAssetSource.prototype.componentDidMount = function () {
        var _this = this;
        var hasConfig = !!(config_asset_source_cloudinary_1.default.cloudName && config_asset_source_cloudinary_1.default.apiKey);
        this.setState({ hasConfig: hasConfig }, function () { return hasConfig && utils_1.loadCloudinary(_this.setupMediaLibrary); });
    };
    CloudinaryAssetSource.prototype.renderConfigWarning = function () {
        return (react_1.default.createElement("div", null,
            react_1.default.createElement("h2", null, "Missing configuration"),
            react_1.default.createElement("p", null, "You must first configure the plugin with your Cloudinary credentials"),
            react_1.default.createElement("p", null,
                "Edit the ",
                react_1.default.createElement("code", null, "./config/asset-source-cloudinary.json"),
                " file in your Sanity Studio folder."),
            react_1.default.createElement("p", null,
                "You can get your credentials by visiting the",
                ' ',
                react_1.default.createElement("a", { href: "https://cloudinary.com/console", rel: "noopener noreferrer", target: "_blank" }, "Cloudinary console"),
                ' ',
                "and get your Cloud name and API key.")));
    };
    CloudinaryAssetSource.prototype.render = function () {
        var _a = this.state, hasConfig = _a.hasConfig, loadingMessage = _a.loadingMessage;
        return (react_1.default.createElement(fullscreen_1.default, { title: "Select image from Cloudinary", onClose: this.handleClose, isOpen: true },
            hasConfig && loadingMessage && react_1.default.createElement(spinner_1.default, { fullscreen: true, center: true, message: loadingMessage }),
            hasConfig && (react_1.default.createElement("div", { style: { visibility: 'hidden' }, ref: this.contentRef, className: CloudinaryAssetSource_css_1.default.widget, id: "cloundinaryWidget-" + this.domId })),
            !hasConfig && this.renderConfigWarning()));
    };
    CloudinaryAssetSource.defaultProps = {
        selectedAssets: undefined
    };
    return CloudinaryAssetSource;
}(react_1.default.Component));
exports.default = CloudinaryAssetSource;
//# sourceMappingURL=CloudinaryAssetSource.js.map